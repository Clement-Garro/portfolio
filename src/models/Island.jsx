/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: nimzu (https://sketchfab.com/nimzuk)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/foxs-islands-163b68e09fcc47618450150be7785907
Title: Fox's islands
*/

import React, {useRef, useEffect} from "react";
import {useGLTF} from "@react-three/drei";
import {useFrame, useThree} from "@react-three/fiber";
import {a} from "@react-spring/three";
import islandeScene from "../assets/3d/new_island.glb";

const Island = ({isRotating, setIsRotating, setCurrentStage, ...props}) => {
    const islandRef = useRef();

    const {gl, viewport} = useThree();
    const {nodes, materials} = useGLTF(islandeScene);

    const lastX = useRef(0);
    const rotationSpeed = useRef(0);
    const dampingFactor = 0.95;

    const handlePointerDown = (e) => {
        e.stopPropagation();
        e.preventDefault();
        setIsRotating(true);

        const clientX = e.touches
            ? e.touches[0].clientX
            : e.clientX;


        lastX.current = clientX;
    }

    const handlePointerUp = (e) => {
        e.stopPropagation();
        e.preventDefault();
        setIsRotating(false);
    }

    const handlePointerMove = (e) => {
        e.stopPropagation();
        e.preventDefault();

        if (isRotating) {
            const clientX = e.touches
                ? e.touches[0].clientX
                : e.clientX;

            const delta = (clientX - lastX.current) / viewport.width;

            islandRef.current.rotation.y += delta * Math.PI * 0.01;
            lastX.current = clientX;
            rotationSpeed.current = delta * Math.PI * 0.01;

        }
    }

    const handleKeyDown = (e) => {
        if (e.key === 'ArrowLeft') {
            if (!isRotating) setIsRotating(true);
            islandRef.current.rotation.y += 0.01 * Math.PI;
        } else if (e.key === 'ArrowRight') {
            if (!isRotating) setIsRotating(true);
            islandRef.current.rotation.y -= 0.01 * Math.PI;
        }
    }

    const handleKeyUp = (e) => {
        if (e.key === 'ArrowLeft' || e.key === 'ArrowRight') {
            setIsRotating(false);
        }
    }

    useFrame(() => {
        if (!isRotating) {
            rotationSpeed.current *= dampingFactor;

            if (Math.abs(rotationSpeed.current) < 0.001) {
                rotationSpeed.current = 0;
            }

            islandRef.current.rotation.y += rotationSpeed.current;
        } else {
            const rotation = islandRef.current.rotation.y;
            const normalizedRotation =
                ((rotation % (2 * Math.PI)) + 2 * Math.PI) % (2 * Math.PI);

            // Set the current stage based on the island's orientation
            switch (true) {
                case normalizedRotation >= 5.45 && normalizedRotation <= 5.85:
                    setCurrentStage(4);
                    break;
                case normalizedRotation >= 0.85 && normalizedRotation <= 1.3:
                    setCurrentStage(3);
                    break;
                case normalizedRotation >= 2.4 && normalizedRotation <= 2.6:
                    setCurrentStage(2);
                    break;
                case normalizedRotation >= 4.25 && normalizedRotation <= 4.75:
                    setCurrentStage(1);
                    break;
                default:
                    setCurrentStage(null);
            }
        }
    })

    useEffect(() => {
        const canvas = gl.domElement;
        canvas.addEventListener('pointerdown', handlePointerDown);
        canvas.addEventListener('pointerup', handlePointerUp);
        canvas.addEventListener('pointermove', handlePointerMove);
        document.addEventListener('keydown', handleKeyDown);
        document.addEventListener('keyup', handleKeyUp);

        return () => {
            canvas.removeEventListener('pointerdown', handlePointerDown);
            canvas.removeEventListener('pointerup', handlePointerUp);
            canvas.removeEventListener('pointermove', handlePointerMove);
            document.removeEventListener('keydown', handleKeyDown);
            document.removeEventListener('keyup', handleKeyUp);
        }
    }, [gl, handlePointerDown, handlePointerUp, handlePointerMove, handleKeyDown, handleKeyUp])
    return (
        <a.group ref={islandRef} {...props} >
            <group position={[0, 0, 0]}>
                <mesh
                    geometry={nodes.Island.geometry}
                    material={materials[nodes.Island.material.name]}
                />
                <mesh
                    geometry={nodes.Island_1.geometry}
                    material={materials[nodes.Island_1.material.name]}
                />
                <mesh
                    geometry={nodes.Island_2.geometry}
                    material={materials[nodes.Island_2.material.name]}
                />
                <mesh
                    geometry={nodes.Island_3.geometry}
                    material={materials[nodes.Island_3.material.name]}
                />
                <mesh
                    geometry={nodes.Island_4.geometry}
                    material={materials[nodes.Island_4.material.name]}
                />
            </group>
            <group position={[0, 7, 0]} scale={[0.5, 0.5, 0.5]}>
                <mesh
                    geometry={nodes.House_skin1.geometry}
                    material={materials[nodes.House_skin1.material.name]}
                />
                <mesh
                    geometry={nodes.House_skin1_1.geometry}
                    material={materials[nodes.House_skin1_1.material.name]}
                />
                <mesh
                    geometry={nodes.House_skin1_2.geometry}
                    material={materials[nodes.House_skin1_2.material.name]}
                />
                <mesh
                    geometry={nodes.House_skin1_3.geometry}
                    material={materials[nodes.House_skin1_3.material.name]}
                />
                <mesh
                    geometry={nodes.House_skin1_4.geometry}
                    material={materials[nodes.House_skin1_4.material.name]}
                />
            </group>
            <Tree nodes={nodes} materials={materials} position={[0.3, 6.5, -3]} scale={[0.5,0.5,0.5]} />
            <Tree nodes={nodes} materials={materials} position={[2, 6.5, -2]} scale={[0.4,0.4,0.4]} />
            <Tree nodes={nodes} materials={materials} position={[-2, 6.5, -1.75]} scale={[0.35,0.35,0.35]} />
            <Tree nodes={nodes} materials={materials} position={[-0.35, 6.5, 2]} scale={[0.45,0.45,0.45]} />
            <Tree nodes={nodes} materials={materials} position={[2, 6.5, 1.25]} scale={[0.5,0.5,0.5]} />
        </a.group>
    );
}

function Tree({nodes,materials, ...props}) {
    return (
        <group {...props}>
            <mesh
                geometry={nodes.PineTreeGreen.geometry}
                material={materials[nodes.PineTreeGreen.material.name]}
            />
            <mesh
                geometry={nodes.PineTreeGreen_1.geometry}
                material={materials[nodes.PineTreeGreen_1.material.name]}
            />
            <mesh
                geometry={nodes.PineTreeGreen_2.geometry}
                material={materials[nodes.PineTreeGreen_2.material.name]}
            />
            <mesh
                geometry={nodes.PineTreeGreen_3.geometry}
                material={materials[nodes.PineTreeGreen_3.material.name]}
            />
            <mesh
                geometry={nodes.PineTreeGreen_4.geometry}
                material={materials[nodes.PineTreeGreen_4.material.name]}
            />
            <mesh
                geometry={nodes.PineTreeGreen_5.geometry}
                material={materials[nodes.PineTreeGreen_5.material.name]}
            />
            <mesh
                geometry={nodes.PineTreeGreen_6.geometry}
                material={materials[nodes.PineTreeGreen_6.material.name]}
            />
        </group>
    )
}

export default Island;
