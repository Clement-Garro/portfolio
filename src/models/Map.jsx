/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: nimzu (https://sketchfab.com/nimzuk)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/foxs-islands-163b68e09fcc47618450150be7785907
Title: Fox's islands
*/

import React, {useEffect, useRef, useState} from "react";
import {useGLTF} from "@react-three/drei";
import {useFrame, useThree} from "@react-three/fiber";
import {a} from "@react-spring/three";
import islandeScene from "../assets/3d/island.glb";
import {GreenTree} from "../components/Island/GreenTree.jsx";
import {YellowTree} from "../components/Island/YellowTree.jsx";
import {Island} from "../components/Island/Island.jsx";
import {PinkHouse} from "../components/Island/PinkHouse.jsx";
import {RedTree} from "../components/Island/RedTree.jsx";
import {BlueTree} from "../components/Island/BlueTree.jsx";
import {BlueHouse} from "../components/Island/BlueHouse.jsx";
import {RedHouse} from "../components/Island/RedHouse.jsx";

export const Map = ({isRotating, setIsRotating, setCurrentStage, currentStage, ...props}) => {
    const islandRef = useRef();

    const {gl, viewport} = useThree();
    const {nodes, materials} = useGLTF(islandeScene);

    const lastX = useRef(0);
    const rotationSpeed = useRef(0);
    const dampingFactor = 0.95;

    const [lastStage, setLastStage] = useState(null);

    useEffect(() => {
        setLastStage(currentStage);
    }, [currentStage]);


    const handlePointerDown = (e) => {
        e.stopPropagation();
        e.preventDefault();
        setIsRotating(true);

        lastX.current = e.touches
            ? e.touches[0].clientX
            : e.clientX;
    }

    const handlePointerUp = (e) => {
        e.stopPropagation();
        e.preventDefault();
        setIsRotating(false);
    }

    const handlePointerMove = (e) => {
        e.stopPropagation();
        e.preventDefault();

        if (isRotating) {
            const clientX = e.touches
                ? e.touches[0].clientX
                : e.clientX;

            const delta = (clientX - lastX.current) / viewport.width;

            islandRef.current.rotation.y += delta * Math.PI * 0.01;
            lastX.current = clientX;
            rotationSpeed.current = delta * Math.PI * 0.01;

        }
    }

    const handleKeyDown = (e) => {
        if (e.key === 'ArrowLeft') {
            if (!isRotating) setIsRotating(true);
            islandRef.current.rotation.y += 0.01 * Math.PI;
        } else if (e.key === 'ArrowRight') {
            if (!isRotating) setIsRotating(true);
            islandRef.current.rotation.y -= 0.01 * Math.PI;
        }
    }

    const handleKeyUp = (e) => {
        if (e.key === 'ArrowLeft' || e.key === 'ArrowRight') {
            setIsRotating(false);
        }
    }

    useFrame(() => {
        if (!isRotating) {
            rotationSpeed.current *= dampingFactor;

            if (Math.abs(rotationSpeed.current) < 0.001) {
                rotationSpeed.current = 0;
            }

            islandRef.current.rotation.y += rotationSpeed.current;
        } else {
            const rotation = islandRef.current.rotation.y;
            const normalizedRotation =
                ((rotation % (2 * Math.PI)) + 2 * Math.PI) % (2 * Math.PI);

            // Set the current stage based on the island's orientation
            switch (true) {
                case normalizedRotation >= 5.45 && normalizedRotation <= 5.85:
                    setCurrentStage(4);
                    break;
                case normalizedRotation >= 0.85 && normalizedRotation <= 1.3:
                    setCurrentStage(3);
                    break;
                case normalizedRotation >= 2.4 && normalizedRotation <= 2.6:
                    setCurrentStage(2);
                    break;
                case normalizedRotation >= 4.25 && normalizedRotation <= 4.75:
                    setCurrentStage(1);
                    break;
                default:
                    setCurrentStage(lastStage);
            }
        }
    })

    useEffect(() => {
        const canvas = gl.domElement;
        canvas.addEventListener('pointerdown', handlePointerDown);
        canvas.addEventListener('pointerup', handlePointerUp);
        canvas.addEventListener('pointermove', handlePointerMove);
        document.addEventListener('keydown', handleKeyDown);
        document.addEventListener('keyup', handleKeyUp);

        return () => {
            canvas.removeEventListener('pointerdown', handlePointerDown);
            canvas.removeEventListener('pointerup', handlePointerUp);
            canvas.removeEventListener('pointermove', handlePointerMove);
            document.removeEventListener('keydown', handleKeyDown);
            document.removeEventListener('keyup', handleKeyUp);
        }
    }, [gl, handlePointerDown, handlePointerUp, handlePointerMove, handleKeyDown, handleKeyUp])
    console.log(nodes)
    console.log(materials)
    return (
        <a.group ref={islandRef} {...props} >
            <Island nodes={nodes} materials={materials} position={[0, 0, 0]}/>
            <PinkHouse nodes={nodes} materials={materials} position={[0.5, 7, -0.5]} scale={[0.45, 0.45, 0.45]}/>
            <GreenTree nodes={nodes} materials={materials} position={[-1.5, 6.5, -2]} scale={[0.5, 0.5, 0.5]}/>
            <GreenTree nodes={nodes} materials={materials} position={[3, 6.5, 1.5]} scale={[0.35, 0.35, 0.35]} rotation={[0,0,-0.1]}/>
            <YellowTree nodes={nodes} materials={materials} position={[-1.5, 6.5, -0.5]} scale={[0.4, 0.4, 0.4]}/>
            <RedTree nodes={nodes} materials={materials} position={[2, 6.5, 0.5]} scale={[0.45, 0.45, 0.45]}/>

            <Island nodes={nodes} materials={materials} position={[-2, 1, -3.5]} rotation={[0, Math.PI*0.32, 0]} scale={[0.45,0.45,0.45]}/>
            <GreenTree nodes={nodes} materials={materials} position={[-2, 4, -4.4]} rotation={[-0.1, 0 , 0]} scale={[0.45,0.45,0.45]}/>
            <BlueTree nodes={nodes} materials={materials} position={[-2.8, 4, -4.8]} rotation={[-0.35, 0 , 0]} scale={[0.4,0.4,0.4]}/>
            <YellowTree nodes={nodes} materials={materials} position={[-1.2, 4, -4.2]} rotation={[0, 0 , 0]} scale={[0.35,0.35,0.35]}/>

            <Island nodes={nodes} materials={materials} position={[3.2, 1, 1.4]} rotation={[0, Math.PI*0.58, 0]} scale={[0.5,0.5,0.5]}/>
            <GreenTree nodes={nodes} materials={materials} position={[4, 4, 1]} rotation={[0, 0 , 0]} scale={[0.4,0.4,0.4]}/>
            <RedTree nodes={nodes} materials={materials} position={[4.6, 4, 2]} rotation={[0, 0 , -0.2]} scale={[0.45,0.45,0.45]}/>
            <YellowTree nodes={nodes} materials={materials} position={[4.3, 4, 0.5]} rotation={[-0.35, 0 , -0.3]} scale={[0.35,0.35,0.35]}/>

            <Island nodes={nodes} materials={materials} position={[10, 0.3, -0.5]} rotation={[0, Math.PI*0.67, 0]} scale={[0.5,0.5,0.5]}/>
            <GreenTree nodes={nodes} materials={materials} position={[10.6, 3.4, -0.1]}  scale={[0.33,0.33,0.33]}/>
            <RedTree nodes={nodes} materials={materials} position={[10, 3.4, -0.5]} scale={[0.4,0.4,0.4]} />
            <YellowTree nodes={nodes} materials={materials} position={[11.2, 3.4, -1.3]} rotation={[-0.35, 0 , -0.3]} scale={[0.35,0.35,0.35]}/>
            <BlueTree nodes={nodes} materials={materials} position={[9.6, 3.2, -1.5]}  rotation={[-0.2, 0 , 0]} scale={[0.45,0.45,0.45]}/>

            <Island nodes={nodes} materials={materials} position={[-4.8, 1.6, -7]} rotation={[0, Math.PI*0.32, 0]} scale={[0.5,0.5,0.5]}/>
            <BlueHouse nodes={nodes} materials={materials} position={[-4.6, 5.1, -7]} rotation={[0, 24.8, 0]} scale={[0.32,0.32,0.32]}/>
            <RedTree nodes={nodes} materials={materials} position={[-3.6, 4.9, -8]} rotation={[-0.15, 0 , -0.1]} scale={[0.4,0.4,0.4]}/>
            <YellowTree nodes={nodes} materials={materials} position={[-4.4, 4.7, -5.6]} rotation={[0, 0 , 0]} scale={[0.35,0.35,0.35]}/>

            <Island nodes={nodes} materials={materials} position={[4, 4, 8]} rotation={[0, Math.PI*0.32, 0]} scale={[0.6,0.6,0.6]}/>
            <RedHouse nodes={nodes} materials={materials} position={[4.5, 8.2, 7.6]} rotation={[0, 22, 0]} scale={[0.36,0.36,0.36]}/>
            <GreenTree nodes={nodes} materials={materials} position={[4, 8, 9.6]}  scale={[0.45,0.45,0.45]} rotation={[0.1,0,0]}/>
            <GreenTree nodes={nodes} materials={materials} position={[3.2, 8, 8.2]}  scale={[0.3,0.3,0.3]}/>

            <Island nodes={nodes} materials={materials} position={[-7, 0.4, 2]} rotation={[0, Math.PI*0.32, 0]} scale={[0.32,0.32,0.32]}/>
            <GreenTree nodes={nodes} materials={materials} position={[-7.4, 2.2, 2.4]}  scale={[0.4,0.4,0.4]} rotation={[0.12,0,0.1]}/>
            <GreenTree nodes={nodes} materials={materials} position={[-6.6, 2.2, 1.5]}  scale={[0.3,0.3,0.3]} rotation={[-0.12,0,-0.1]}/>
        </a.group>
    );
};
